/* 
  Return the fibonacci number at the nth position, recursively.
  
  Fibonacci sequence: 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, ...

  The next number is found by adding up the two numbers before it,
  starting with 0 and 1 as the first two numbers of the sequence.
*/

const num1 = 0;
const expected1 = 0;

const num2 = 1;
const expected2 = 1;

const num3 = 2;
const expected3 = 1;

const num4 = 3;
const expected4 = 2;

const num5 = 4;
const expected5 = 3;

const num6 = 8;
const expected6 = 21;

/**
 * Recursively finds the nth number in the fibonacci sequence.
 * - Time: O(?).
 * - Space: O(?).
 * @param {number} num The position of the desired number in the fibonacci sequence.
 * @returns {number} The fibonacci number at the given position.
 */
function fibonacci(num, n1=0, n2=1) {
    if (num == 0) {
        return n1
    }
    sum = n1 + n2
    n1 = n2
    n2 = sum
    num --
    return fibonacci(num, n1, n2)

}

console.log(fibonacci(num1))
console.log(fibonacci(num2))
console.log(fibonacci(num3))
console.log(fibonacci(num4))
console.log(fibonacci(num5))
console.log(fibonacci(num6))
console.log(fibonacci(100))

// Alt solution, my solution above added n1 and n2 parameters
// The solution below has no added parameters but a much worse runtime

function fib(num) {
    if (num < 2) {
        return num
    }
    return fib(num-1) + fib(num-2)
}
console.log('****')
console.log(fib(num1))
console.log(fib(num2))
console.log(fib(num3))
console.log(fib(num4))
console.log(fib(num5))
console.log(fib(num6))
console.log(fib(10))